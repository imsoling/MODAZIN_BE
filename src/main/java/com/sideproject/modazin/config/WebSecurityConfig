package com.sideproject.modazin.config;

//@RequiredArgsConstructor
//@EnableWebSecurity
//public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
//
//    private final ObjectMapper objectMapper;
//    private final JwtAuthenticationFilter jwtAuthenticationFilter;
//
//    @Override
//    public void configure(WebSecurity web) {
//        web.ignoring().mvcMatchers(
//                "/error",
//                "/favicon.ico",
//                "/swagger-ui.html",
//                "/swagger/**",
//                "/swagger-resources/**",
//                "/webjars/**",
//                "/v2/api-docs"
//        );
//
//        web.ignoring().antMatchers(
//                "/api/v2//login/**"
//        );
//    }
//
//    @Override
//    protected void configure(HttpSecurity http) throws Exception {
//        http.antMatcher("/**")
//                .authorizeRequests()
//                .antMatchers("/api/v2/**").hasAuthority(USER.name());
//
//        http.httpBasic().disable()
//                .formLogin().disable()
//                .cors().disable()
//                .csrf().disable()
//                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
//                .and()
//                .authorizeRequests()
//                .anyRequest().permitAll()
//                .and()
//                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
//
//        http.exceptionHandling()
//                .authenticationEntryPoint(((request, response, authException) -> {
//                    response.setStatus(HttpStatus.UNAUTHORIZED.value());
//                    response.setContentType(MediaType.APPLICATION_JSON_VALUE);
//                    objectMapper.writeValue(
//                            response.getOutputStream(),
//                            ExceptionResponse.of(ExceptionCode.FAIL_AUTHENTICATION)
//                    );
//                }))
//                .accessDeniedHandler(((request, response, accessDeniedException) -> {
//                    response.setStatus(HttpStatus.FORBIDDEN.value());
//                    response.setContentType(MediaType.APPLICATION_JSON_VALUE);
//                    objectMapper.writeValue(
//                            response.getOutputStream(),
//                            ExceptionResponse.of(ExceptionCode.FAIL_AUTHORIZATION)
//                    );
//                }));
//    }
//}

//@RequiredArgsConstructor
//@Configuration
//@EnableWebSecurity
//@EnableGlobalMethodSecurity(prePostEnabled = true)
//public class SecurityConfig extends WebSecurityConfigurerAdapter
//{
//    private final CustomUserDetailsService customUserDetailsService;
//    @Bean
//    public BCryptPasswordEncoder encoder() {
//        return new BCryptPasswordEncoder();}
//
//    @Override
//    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//        auth.userDetailsService(customUserDetailsService).passwordEncoder(encoder());
//    }
//
//    @Override
//    public void configure(WebSecurity web) throws Exception {
//        web.ignoring().antMatchers( "/css/**", "/js/**", "/img/**");
//    }
//
//    @Override
//    protected void configure(HttpSecurity http) throws Exception {
//        http.csrf()
//            .disable()
//            .authorizeRequests()
//            .antMatchers("/", "/auth/**", "/posts/read/**", "/posts/search/**")
//            .permitAll()
//            .anyRequest()
//            .authenticated()
//            .and()
//            .formLogin()
//            .loginPage("/auth/login")
//            .loginProcessingUrl("loginProc")
//            .defaultSuccessUrl("/")
//            .and()
//            .logout()
//            .logoutSuccessUrl("/")
//            .invalidateHttpSession(true);
//    }
//}

